#!/usr/bin/env python3
"""
RPI CAN Monitor - Main Entry Point
A tool for monitoring CAN bus communications with different UI options.
"""

import sys
import logging
import argparse
from typing import Optional

def setup_logging(level: int = logging.INFO) -> None:
    """Set up logging for the application."""
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logging.getLogger('can').setLevel(logging.WARNING)

def parse_arguments() -> argparse.Namespace:
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="CAN Monitor Tool with multiple UI options")
    
    # UI selection arguments
    ui_group = parser.add_argument_group('UI Selection')
    ui_group.add_argument('--ui', choices=['pyqt', 'pyside', 'auto'], default='auto',
                         help='UI framework to use (default: auto)')
    ui_group.add_argument('--modern', action='store_true',
                         help='Use modern UI (PyDracula based)')
    ui_group.add_argument('--classic', action='store_true',
                         help='Use classic UI')
    
    # CLI mode arguments
    cli_group = parser.add_argument_group('CLI Mode')
    cli_group.add_argument('--cli', action='store_true',
                         help='Run in CLI mode (no GUI)')
    cli_group.add_argument('--action', type=str,
                        help='CLI action (add_filter, remove_filter, send_message, etc.)')
    cli_group.add_argument('--details', type=str,
                        help='Details for CLI action')
    cli_group.add_argument('--message', type=str,
                        help='Message to send (for send_message action)')
    cli_group.add_argument('--channel', type=str, default='can0',
                        help='CAN channel to use (default: can0)')
    cli_group.add_argument('--bitrate', type=str, default='500000',
                        help='CAN bitrate (default: 500000)')
    
    # Debug options
    debug_group = parser.add_argument_group('Debug Options')
    debug_group.add_argument('--debug', action='store_true',
                           help='Enable debug logging')
    
    return parser.parse_args()

def run_cli_mode(args: argparse.Namespace) -> None:
    """Run the application in CLI mode."""
    from main import run_cli
    run_cli(args)

def run_gui_mode(args: argparse.Namespace) -> None:
    """Run the application in GUI mode."""
    # Fix for high DPI displays
    import os
    os.environ["QT_FONT_DPI"] = "96"
    
    # Determine which UI to use based on arguments and availability
    ui_framework = args.ui
    use_modern = args.modern
    
    # If neither modern nor classic is specified, default to modern
    if not args.modern and not args.classic:
        use_modern = True
    
    # Auto-detect UI framework if needed
    if ui_framework == 'auto':
        try:
            import PySide6
            ui_framework = 'pyside'
        except ImportError:
            ui_framework = 'pyqt'
    
    # Import the appropriate UI modules and start the application
    if ui_framework == 'pyside':
        try:
            from PySide6.QtWidgets import QApplication
            from PySide6.QtGui import QIcon
            
            app = QApplication(sys.argv)
            app.setWindowIcon(QIcon("ui/assets/images/images/PyDracula.png"))
            
            if use_modern:
                from ui.frameworks.pyside.pydracula_window import PyDraculaWindow
                window = PyDraculaWindow()
            else:
                # We don't have a classic PySide UI yet
                logging.warning("Classic UI not available for PySide6, using PyQt6")
                raise ImportError("No classic PySide UI")
                
        except ImportError as e:
            logging.warning(f"Error loading PySide6: {e}")
            logging.warning("Falling back to PyQt6...")
            ui_framework = 'pyqt'
    
    if ui_framework == 'pyqt':
        from PyQt6.QtWidgets import QApplication
        from PyQt6.QtGui import QIcon
        
        app = QApplication(sys.argv)
        
        if use_modern:
            app.setWindowIcon(QIcon("ui/assets/images/images/PyDracula.png"))
            from ui.frameworks.pyqt.pydracula_window import PyQtPyDraculaWindow
            window = PyQtPyDraculaWindow()
        else:
            from PyQt6.QtWidgets import QStyleFactory
            app.setStyle(QStyleFactory.create("Fusion"))
            
            # Apply basic stylesheet
            stylesheet = """
            QFrame {
                border: none;
            }
            """
            app.setStyleSheet(stylesheet)
            
            from ui.frameworks.pyqt.main_window import MainWindow
            window = MainWindow()
    
    window.show()
    sys.exit(app.exec())

def main() -> None:
    """Main entry point for the application."""
    args = parse_arguments()
    
    # Setup logging
    log_level = logging.DEBUG if args.debug else logging.INFO
    setup_logging(log_level)
    
    # Run in CLI or GUI mode
    if args.cli or args.action:
        run_cli_mode(args)
    else:
        run_gui_mode(args)

if __name__ == "__main__":
    main()